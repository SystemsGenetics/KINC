Usage
=====




Basic Usage
-----------

The easiest way to learn how to use KINC is to study the ``kinc.sh`` script, which can run the entire KINC workflow. Additionally, you can use the ``make-input-data.py`` script to generate a "fake" GEM with which to test KINC quickly:

.. code:: bash

   # generate fake GEM
   python scripts/make-input-data.py

   # run KINC
   scripts/kinc.sh serial 1 GEM.txt

HPC Systems
-----------

For large GEMs, you will likely need to use a high-performance computing (HPC) system in order to distribute the work of constructing the network across many nodes. The following instructions are for specific HPC systems on which KINC has been tested and will not work out-of-the-box for all systems, however these instructions can likely be adapted to other systems.

Palmetto
~~~~~~~~

Ensure the GEM you intend to process is in the correct format, read as a ``.txt`` file. Run the following command:

.. code:: bash

   cp /zfs/feltus/btsheal/kinc-cpu.sh $HOME
   cp /zfs/feltus/btsheal/kinc-gpu.sh $HOME

These two scripts, ``kinc-cpu.sh`` and ``kinc-gpu.sh``, are two ways to run KINC end-to-end, one with CPUs and one with GPUs. You can use either one according to your needs.

Each script takes a plaintext GEM file, and outputs the following:

- ``.emx``: expression matrix
- ``.ccm``: cluster composition matrix
- ``.cmx``: correlation matrix
- ``.rmt.txt``: the RMT log file, containing the threshold value generated by RMT
- ``.coexpnet.txt``: the network file, the product of KINC
- ``.o*``: the job output file, check for errors at runtime

You only need one of these scripts and your GEM file to run KINC. However, you must modify the ``kinc-*.sh`` script to use your GEM file and run the analytics that you want:

.. code:: bash

   # define input file
   INFILE="Yeast.txt"

   # define which analytics to run
   RUN_IMPORT_EMX=1
   RUN_SIMILARITY=1
   RUN_EXPORT_CMX=0
   RUN_THRESHOLD=0
   RUN_EXTRACT=0

More detailed instructions are provided in the scripts themselves.

The script will use scratch storage automatically, so it is recommended that you launch your jobs from your home directory so that all output files are automatically saved to your home directory instead of scratch:

.. code:: bash

   qsub kinc-cpu.sh

Once the job has finished, all output files should be in the directory where you ran ``qsub``. Check the last line of the log file to see the final threshold value, and check the output file to ensure there are no errors.

The resulting network file can be visualized using `BioDepVis <https://github.com/SystemsGenetics/BioDepVis.git>`__ or Cytoscape.

SLURM
~~~~~

Although KINC is an MPI application, generally you can run ``kinc`` as a stand-alone application without ``mpirun`` and achieve normal serial behavior. However, on a SLURM cluster where MPI jobs must be run with the ``srun`` command and where PMI2 is compiled into MPI, ``kinc`` cannot be executed stand-alone. It must be executed using ``srun`` with the additional argument ``--mpi=pmi2``. For example:

.. code:: bash

   srun --mpi=pmi2 kinc run import-emx --input Yeast.txt --output Yeast.emx --nan NA

Docker
------

KINC can be run in a Docker container, which does not require any dependencies aside from Docker and nvidia-docker. The Dockerfile for KINC is available in the KINC Github repository, and Docker images are maintained on DockerHub under ``systemsgenetics/kinc``. This method currently does not support the GUI version of KINC.

To use KINC in an interactive Docker container:

.. code:: bash

   nvidia-docker run --rm -it systemsgenetics/kinc:3.3.0 bash
   > nvidia-smi
   > kinc settings

You will need to share input/output data between the Docker container and the host machine, which can be done by mounting a directory:

.. code:: bash

   nvidia-docker run --rm -it -v $PWD:/root systemsgenetics/kinc:3.3.0 bash
   > ls

Nextflow
--------

Another recommended option is to use the `KINC-nf <https://github.com/SystemsGenetics/KINC-nf.git>`__ nextflow pipeline, which can run the entire KINC workflow on nearly any computing environment with very little setup required. Consult the KINC-nf repository on Github for instructions.
